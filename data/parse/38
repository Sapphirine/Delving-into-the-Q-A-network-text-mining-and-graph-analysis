well m sure mapreduc solv problem sure wouldn mapreduc alon solv question rais import thing take account make feasibl low latenc queri tb data differ machin distribut comput distribut mean index simpli distribut differ machin actual replic along differ cluster allow lot user perform differ queri low retriev time ye huge compani afford much machin cach cach tremend reduc execut time crawl step retriev page rank exihibit result lot tweak effici algorithm solut effect implement also effici ton hard code optim local refer compress cach usual appliabl differ part process consid let tri address question imagin infeas result everi singl possibl queri indexedy would actual infeas result everi singl possibl queri infinit number term world even assum term properli spell enter exponenti number queri n inf term 2 n done ? cach mani queri result one cach ? cach polici frequent popular relev user queri one cach wouldn hardwar latenc googl hardwar huge ? even data googl store tb ssdsnowday highli develop processor peopl tend think everi possibl task must finish within second less deal much data must process extrem power processor multipl core lot memori howev one thing rule market money investor interest wast done ?the prefer actual lot machin use simpl access term cost processor lower price build multitud cluster ye work main bottleneck alway boil disk consid simpl measur perform mani machin one afford load thing main memori instead work hard disk memori card expens us mere human be cheap enterpris buy lot card sinc costli much memori need load index keep cach hand problem sinc mani machin need super fast processor direct queri differ place cluster machin respons attend specif geograph region allow special data cach even better respons time mapreduc help solv problem ?although think use mapreduc restrict inform insid googl m convers point howev googl implement mapreduc sure hadoop must lot optim mani involv aspect discuss architectur mapreduc probabl help guid comput physic distribut mani point consid justifi speed queri time okay understand popular search cach memori unpopular search ?the graph present curv kind queri occur see three main kind search hold approxim 1 3 volum queri area curv plot show power law reinforc fact smaller queri popular second third queri still feasibl process sinc hold word set call obscur queri usual consist non experienc user queri neglig part queri lie space novel solut sinc one two queri one third must relev result type someth much obscur googl search shan take longer return list result probabl show someth infer d like say may simpli state document term even cut search 32 word happen random test dozen appliabl heurist may either ignor word tri break queri smaller one gather popular result solut tailor tweak respect feasibl wait time say less second ? d